// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v4.25.3
// source: email.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "emailservice";

export interface VerificationEmailRequest {
  to: string;
  subject: string;
  data: VerificationEmailData | undefined;
  retry: number;
}

export interface Reports {
  data: ReportData[];
}

export interface ReportData {
  to: string;
  subject: string;
  month: string;
  totalClicks: number;
  totalQrScans: number;
  newLinks: number;
  topLinks: TopLink[];
  topQrCodes: TopQRCode[];
  countries: Country[];
  otherCountries: OtherCountries | undefined;
  year: number;
  createdAt: string;
  retry: number;
}

export interface TopLink {
  title: string;
  url: string;
  shortUrl: string;
  clicks: number;
  /** ISO date string */
  createdOn: string;
}

/** Top QR code message */
export interface TopQRCode {
  name: string;
  url: string;
  shortUrl: string;
  scans: number;
  /** ISO date string */
  createdOn: string;
}

/** Country traffic message */
export interface Country {
  rank: number;
  /** can be emoji or image URL */
  flag: string;
  name: string;
  clicks: number;
  qrScans: number;
}

/** Other countries aggregated stats */
export interface OtherCountries {
  clicks: number;
  qrScans: number;
}

export interface VerificationEmailData {
  name: string;
  verifyUrl: string;
  expiryHours: number;
  year: string;
}

export interface emailServiceResponse {
  msg: string;
}

export interface AccessEmailRequest {
  to: string;
  subject: string;
  data: AccessEmailData | undefined;
  retry: number;
}

export interface AccessEmailData {
  name: string;
  location: string;
  ipAddress: string;
  dateTime: string;
  secureAccountUrl: string;
  year: string;
}

function createBaseVerificationEmailRequest(): VerificationEmailRequest {
  return { to: "", subject: "", data: undefined, retry: 0 };
}

export const VerificationEmailRequest: MessageFns<VerificationEmailRequest> = {
  encode(message: VerificationEmailRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.to !== "") {
      writer.uint32(10).string(message.to);
    }
    if (message.subject !== "") {
      writer.uint32(18).string(message.subject);
    }
    if (message.data !== undefined) {
      VerificationEmailData.encode(message.data, writer.uint32(26).fork()).join();
    }
    if (message.retry !== 0) {
      writer.uint32(32).int32(message.retry);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerificationEmailRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerificationEmailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.to = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.subject = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = VerificationEmailData.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.retry = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerificationEmailRequest {
    return {
      to: isSet(object.to) ? globalThis.String(object.to) : "",
      subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
      data: isSet(object.data) ? VerificationEmailData.fromJSON(object.data) : undefined,
      retry: isSet(object.retry) ? globalThis.Number(object.retry) : 0,
    };
  },

  toJSON(message: VerificationEmailRequest): unknown {
    const obj: any = {};
    if (message.to !== "") {
      obj.to = message.to;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.data !== undefined) {
      obj.data = VerificationEmailData.toJSON(message.data);
    }
    if (message.retry !== 0) {
      obj.retry = Math.round(message.retry);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VerificationEmailRequest>, I>>(base?: I): VerificationEmailRequest {
    return VerificationEmailRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerificationEmailRequest>, I>>(object: I): VerificationEmailRequest {
    const message = createBaseVerificationEmailRequest();
    message.to = object.to ?? "";
    message.subject = object.subject ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? VerificationEmailData.fromPartial(object.data)
      : undefined;
    message.retry = object.retry ?? 0;
    return message;
  },
};

function createBaseReports(): Reports {
  return { data: [] };
}

export const Reports: MessageFns<Reports> = {
  encode(message: Reports, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.data) {
      ReportData.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Reports {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReports();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data.push(ReportData.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Reports {
    return { data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => ReportData.fromJSON(e)) : [] };
  },

  toJSON(message: Reports): unknown {
    const obj: any = {};
    if (message.data?.length) {
      obj.data = message.data.map((e) => ReportData.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Reports>, I>>(base?: I): Reports {
    return Reports.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Reports>, I>>(object: I): Reports {
    const message = createBaseReports();
    message.data = object.data?.map((e) => ReportData.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReportData(): ReportData {
  return {
    to: "",
    subject: "",
    month: "",
    totalClicks: 0,
    totalQrScans: 0,
    newLinks: 0,
    topLinks: [],
    topQrCodes: [],
    countries: [],
    otherCountries: undefined,
    year: 0,
    createdAt: "",
    retry: 0,
  };
}

export const ReportData: MessageFns<ReportData> = {
  encode(message: ReportData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.to !== "") {
      writer.uint32(10).string(message.to);
    }
    if (message.subject !== "") {
      writer.uint32(18).string(message.subject);
    }
    if (message.month !== "") {
      writer.uint32(26).string(message.month);
    }
    if (message.totalClicks !== 0) {
      writer.uint32(32).int32(message.totalClicks);
    }
    if (message.totalQrScans !== 0) {
      writer.uint32(40).int32(message.totalQrScans);
    }
    if (message.newLinks !== 0) {
      writer.uint32(48).int32(message.newLinks);
    }
    for (const v of message.topLinks) {
      TopLink.encode(v!, writer.uint32(58).fork()).join();
    }
    for (const v of message.topQrCodes) {
      TopQRCode.encode(v!, writer.uint32(66).fork()).join();
    }
    for (const v of message.countries) {
      Country.encode(v!, writer.uint32(74).fork()).join();
    }
    if (message.otherCountries !== undefined) {
      OtherCountries.encode(message.otherCountries, writer.uint32(82).fork()).join();
    }
    if (message.year !== 0) {
      writer.uint32(88).int32(message.year);
    }
    if (message.createdAt !== "") {
      writer.uint32(98).string(message.createdAt);
    }
    if (message.retry !== 0) {
      writer.uint32(104).int32(message.retry);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.to = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.subject = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.month = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalClicks = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.totalQrScans = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.newLinks = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.topLinks.push(TopLink.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.topQrCodes.push(TopQRCode.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.countries.push(Country.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.otherCountries = OtherCountries.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.year = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.retry = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportData {
    return {
      to: isSet(object.to) ? globalThis.String(object.to) : "",
      subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
      month: isSet(object.month) ? globalThis.String(object.month) : "",
      totalClicks: isSet(object.totalClicks) ? globalThis.Number(object.totalClicks) : 0,
      totalQrScans: isSet(object.totalQrScans) ? globalThis.Number(object.totalQrScans) : 0,
      newLinks: isSet(object.newLinks) ? globalThis.Number(object.newLinks) : 0,
      topLinks: globalThis.Array.isArray(object?.topLinks) ? object.topLinks.map((e: any) => TopLink.fromJSON(e)) : [],
      topQrCodes: globalThis.Array.isArray(object?.topQrCodes)
        ? object.topQrCodes.map((e: any) => TopQRCode.fromJSON(e))
        : [],
      countries: globalThis.Array.isArray(object?.countries)
        ? object.countries.map((e: any) => Country.fromJSON(e))
        : [],
      otherCountries: isSet(object.otherCountries) ? OtherCountries.fromJSON(object.otherCountries) : undefined,
      year: isSet(object.year) ? globalThis.Number(object.year) : 0,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      retry: isSet(object.retry) ? globalThis.Number(object.retry) : 0,
    };
  },

  toJSON(message: ReportData): unknown {
    const obj: any = {};
    if (message.to !== "") {
      obj.to = message.to;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.month !== "") {
      obj.month = message.month;
    }
    if (message.totalClicks !== 0) {
      obj.totalClicks = Math.round(message.totalClicks);
    }
    if (message.totalQrScans !== 0) {
      obj.totalQrScans = Math.round(message.totalQrScans);
    }
    if (message.newLinks !== 0) {
      obj.newLinks = Math.round(message.newLinks);
    }
    if (message.topLinks?.length) {
      obj.topLinks = message.topLinks.map((e) => TopLink.toJSON(e));
    }
    if (message.topQrCodes?.length) {
      obj.topQrCodes = message.topQrCodes.map((e) => TopQRCode.toJSON(e));
    }
    if (message.countries?.length) {
      obj.countries = message.countries.map((e) => Country.toJSON(e));
    }
    if (message.otherCountries !== undefined) {
      obj.otherCountries = OtherCountries.toJSON(message.otherCountries);
    }
    if (message.year !== 0) {
      obj.year = Math.round(message.year);
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.retry !== 0) {
      obj.retry = Math.round(message.retry);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReportData>, I>>(base?: I): ReportData {
    return ReportData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReportData>, I>>(object: I): ReportData {
    const message = createBaseReportData();
    message.to = object.to ?? "";
    message.subject = object.subject ?? "";
    message.month = object.month ?? "";
    message.totalClicks = object.totalClicks ?? 0;
    message.totalQrScans = object.totalQrScans ?? 0;
    message.newLinks = object.newLinks ?? 0;
    message.topLinks = object.topLinks?.map((e) => TopLink.fromPartial(e)) || [];
    message.topQrCodes = object.topQrCodes?.map((e) => TopQRCode.fromPartial(e)) || [];
    message.countries = object.countries?.map((e) => Country.fromPartial(e)) || [];
    message.otherCountries = (object.otherCountries !== undefined && object.otherCountries !== null)
      ? OtherCountries.fromPartial(object.otherCountries)
      : undefined;
    message.year = object.year ?? 0;
    message.createdAt = object.createdAt ?? "";
    message.retry = object.retry ?? 0;
    return message;
  },
};

function createBaseTopLink(): TopLink {
  return { title: "", url: "", shortUrl: "", clicks: 0, createdOn: "" };
}

export const TopLink: MessageFns<TopLink> = {
  encode(message: TopLink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.url !== "") {
      writer.uint32(18).string(message.url);
    }
    if (message.shortUrl !== "") {
      writer.uint32(26).string(message.shortUrl);
    }
    if (message.clicks !== 0) {
      writer.uint32(32).int32(message.clicks);
    }
    if (message.createdOn !== "") {
      writer.uint32(42).string(message.createdOn);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TopLink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTopLink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.shortUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.clicks = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdOn = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TopLink {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      shortUrl: isSet(object.shortUrl) ? globalThis.String(object.shortUrl) : "",
      clicks: isSet(object.clicks) ? globalThis.Number(object.clicks) : 0,
      createdOn: isSet(object.createdOn) ? globalThis.String(object.createdOn) : "",
    };
  },

  toJSON(message: TopLink): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.shortUrl !== "") {
      obj.shortUrl = message.shortUrl;
    }
    if (message.clicks !== 0) {
      obj.clicks = Math.round(message.clicks);
    }
    if (message.createdOn !== "") {
      obj.createdOn = message.createdOn;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TopLink>, I>>(base?: I): TopLink {
    return TopLink.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TopLink>, I>>(object: I): TopLink {
    const message = createBaseTopLink();
    message.title = object.title ?? "";
    message.url = object.url ?? "";
    message.shortUrl = object.shortUrl ?? "";
    message.clicks = object.clicks ?? 0;
    message.createdOn = object.createdOn ?? "";
    return message;
  },
};

function createBaseTopQRCode(): TopQRCode {
  return { name: "", url: "", shortUrl: "", scans: 0, createdOn: "" };
}

export const TopQRCode: MessageFns<TopQRCode> = {
  encode(message: TopQRCode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.url !== "") {
      writer.uint32(18).string(message.url);
    }
    if (message.shortUrl !== "") {
      writer.uint32(26).string(message.shortUrl);
    }
    if (message.scans !== 0) {
      writer.uint32(32).int32(message.scans);
    }
    if (message.createdOn !== "") {
      writer.uint32(42).string(message.createdOn);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TopQRCode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTopQRCode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.shortUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.scans = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdOn = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TopQRCode {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      shortUrl: isSet(object.shortUrl) ? globalThis.String(object.shortUrl) : "",
      scans: isSet(object.scans) ? globalThis.Number(object.scans) : 0,
      createdOn: isSet(object.createdOn) ? globalThis.String(object.createdOn) : "",
    };
  },

  toJSON(message: TopQRCode): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.shortUrl !== "") {
      obj.shortUrl = message.shortUrl;
    }
    if (message.scans !== 0) {
      obj.scans = Math.round(message.scans);
    }
    if (message.createdOn !== "") {
      obj.createdOn = message.createdOn;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TopQRCode>, I>>(base?: I): TopQRCode {
    return TopQRCode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TopQRCode>, I>>(object: I): TopQRCode {
    const message = createBaseTopQRCode();
    message.name = object.name ?? "";
    message.url = object.url ?? "";
    message.shortUrl = object.shortUrl ?? "";
    message.scans = object.scans ?? 0;
    message.createdOn = object.createdOn ?? "";
    return message;
  },
};

function createBaseCountry(): Country {
  return { rank: 0, flag: "", name: "", clicks: 0, qrScans: 0 };
}

export const Country: MessageFns<Country> = {
  encode(message: Country, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rank !== 0) {
      writer.uint32(8).int32(message.rank);
    }
    if (message.flag !== "") {
      writer.uint32(18).string(message.flag);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.clicks !== 0) {
      writer.uint32(32).int32(message.clicks);
    }
    if (message.qrScans !== 0) {
      writer.uint32(40).int32(message.qrScans);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Country {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCountry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.rank = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.flag = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.clicks = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.qrScans = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Country {
    return {
      rank: isSet(object.rank) ? globalThis.Number(object.rank) : 0,
      flag: isSet(object.flag) ? globalThis.String(object.flag) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      clicks: isSet(object.clicks) ? globalThis.Number(object.clicks) : 0,
      qrScans: isSet(object.qrScans) ? globalThis.Number(object.qrScans) : 0,
    };
  },

  toJSON(message: Country): unknown {
    const obj: any = {};
    if (message.rank !== 0) {
      obj.rank = Math.round(message.rank);
    }
    if (message.flag !== "") {
      obj.flag = message.flag;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clicks !== 0) {
      obj.clicks = Math.round(message.clicks);
    }
    if (message.qrScans !== 0) {
      obj.qrScans = Math.round(message.qrScans);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Country>, I>>(base?: I): Country {
    return Country.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Country>, I>>(object: I): Country {
    const message = createBaseCountry();
    message.rank = object.rank ?? 0;
    message.flag = object.flag ?? "";
    message.name = object.name ?? "";
    message.clicks = object.clicks ?? 0;
    message.qrScans = object.qrScans ?? 0;
    return message;
  },
};

function createBaseOtherCountries(): OtherCountries {
  return { clicks: 0, qrScans: 0 };
}

export const OtherCountries: MessageFns<OtherCountries> = {
  encode(message: OtherCountries, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clicks !== 0) {
      writer.uint32(8).int32(message.clicks);
    }
    if (message.qrScans !== 0) {
      writer.uint32(16).int32(message.qrScans);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OtherCountries {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOtherCountries();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.clicks = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.qrScans = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OtherCountries {
    return {
      clicks: isSet(object.clicks) ? globalThis.Number(object.clicks) : 0,
      qrScans: isSet(object.qrScans) ? globalThis.Number(object.qrScans) : 0,
    };
  },

  toJSON(message: OtherCountries): unknown {
    const obj: any = {};
    if (message.clicks !== 0) {
      obj.clicks = Math.round(message.clicks);
    }
    if (message.qrScans !== 0) {
      obj.qrScans = Math.round(message.qrScans);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OtherCountries>, I>>(base?: I): OtherCountries {
    return OtherCountries.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OtherCountries>, I>>(object: I): OtherCountries {
    const message = createBaseOtherCountries();
    message.clicks = object.clicks ?? 0;
    message.qrScans = object.qrScans ?? 0;
    return message;
  },
};

function createBaseVerificationEmailData(): VerificationEmailData {
  return { name: "", verifyUrl: "", expiryHours: 0, year: "" };
}

export const VerificationEmailData: MessageFns<VerificationEmailData> = {
  encode(message: VerificationEmailData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.verifyUrl !== "") {
      writer.uint32(18).string(message.verifyUrl);
    }
    if (message.expiryHours !== 0) {
      writer.uint32(24).int32(message.expiryHours);
    }
    if (message.year !== "") {
      writer.uint32(34).string(message.year);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerificationEmailData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerificationEmailData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.verifyUrl = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.expiryHours = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.year = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerificationEmailData {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      verifyUrl: isSet(object.verifyUrl) ? globalThis.String(object.verifyUrl) : "",
      expiryHours: isSet(object.expiryHours) ? globalThis.Number(object.expiryHours) : 0,
      year: isSet(object.year) ? globalThis.String(object.year) : "",
    };
  },

  toJSON(message: VerificationEmailData): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.verifyUrl !== "") {
      obj.verifyUrl = message.verifyUrl;
    }
    if (message.expiryHours !== 0) {
      obj.expiryHours = Math.round(message.expiryHours);
    }
    if (message.year !== "") {
      obj.year = message.year;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VerificationEmailData>, I>>(base?: I): VerificationEmailData {
    return VerificationEmailData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerificationEmailData>, I>>(object: I): VerificationEmailData {
    const message = createBaseVerificationEmailData();
    message.name = object.name ?? "";
    message.verifyUrl = object.verifyUrl ?? "";
    message.expiryHours = object.expiryHours ?? 0;
    message.year = object.year ?? "";
    return message;
  },
};

function createBaseemailServiceResponse(): emailServiceResponse {
  return { msg: "" };
}

export const emailServiceResponse: MessageFns<emailServiceResponse> = {
  encode(message: emailServiceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.msg !== "") {
      writer.uint32(10).string(message.msg);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): emailServiceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseemailServiceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.msg = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): emailServiceResponse {
    return { msg: isSet(object.msg) ? globalThis.String(object.msg) : "" };
  },

  toJSON(message: emailServiceResponse): unknown {
    const obj: any = {};
    if (message.msg !== "") {
      obj.msg = message.msg;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<emailServiceResponse>, I>>(base?: I): emailServiceResponse {
    return emailServiceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<emailServiceResponse>, I>>(object: I): emailServiceResponse {
    const message = createBaseemailServiceResponse();
    message.msg = object.msg ?? "";
    return message;
  },
};

function createBaseAccessEmailRequest(): AccessEmailRequest {
  return { to: "", subject: "", data: undefined, retry: 0 };
}

export const AccessEmailRequest: MessageFns<AccessEmailRequest> = {
  encode(message: AccessEmailRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.to !== "") {
      writer.uint32(10).string(message.to);
    }
    if (message.subject !== "") {
      writer.uint32(18).string(message.subject);
    }
    if (message.data !== undefined) {
      AccessEmailData.encode(message.data, writer.uint32(26).fork()).join();
    }
    if (message.retry !== 0) {
      writer.uint32(32).int32(message.retry);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessEmailRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessEmailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.to = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.subject = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = AccessEmailData.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.retry = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessEmailRequest {
    return {
      to: isSet(object.to) ? globalThis.String(object.to) : "",
      subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
      data: isSet(object.data) ? AccessEmailData.fromJSON(object.data) : undefined,
      retry: isSet(object.retry) ? globalThis.Number(object.retry) : 0,
    };
  },

  toJSON(message: AccessEmailRequest): unknown {
    const obj: any = {};
    if (message.to !== "") {
      obj.to = message.to;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.data !== undefined) {
      obj.data = AccessEmailData.toJSON(message.data);
    }
    if (message.retry !== 0) {
      obj.retry = Math.round(message.retry);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccessEmailRequest>, I>>(base?: I): AccessEmailRequest {
    return AccessEmailRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccessEmailRequest>, I>>(object: I): AccessEmailRequest {
    const message = createBaseAccessEmailRequest();
    message.to = object.to ?? "";
    message.subject = object.subject ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? AccessEmailData.fromPartial(object.data)
      : undefined;
    message.retry = object.retry ?? 0;
    return message;
  },
};

function createBaseAccessEmailData(): AccessEmailData {
  return { name: "", location: "", ipAddress: "", dateTime: "", secureAccountUrl: "", year: "" };
}

export const AccessEmailData: MessageFns<AccessEmailData> = {
  encode(message: AccessEmailData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.location !== "") {
      writer.uint32(18).string(message.location);
    }
    if (message.ipAddress !== "") {
      writer.uint32(26).string(message.ipAddress);
    }
    if (message.dateTime !== "") {
      writer.uint32(34).string(message.dateTime);
    }
    if (message.secureAccountUrl !== "") {
      writer.uint32(42).string(message.secureAccountUrl);
    }
    if (message.year !== "") {
      writer.uint32(50).string(message.year);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessEmailData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessEmailData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.location = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ipAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.dateTime = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.secureAccountUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.year = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessEmailData {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      ipAddress: isSet(object.ipAddress) ? globalThis.String(object.ipAddress) : "",
      dateTime: isSet(object.dateTime) ? globalThis.String(object.dateTime) : "",
      secureAccountUrl: isSet(object.secureAccountUrl) ? globalThis.String(object.secureAccountUrl) : "",
      year: isSet(object.year) ? globalThis.String(object.year) : "",
    };
  },

  toJSON(message: AccessEmailData): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.ipAddress !== "") {
      obj.ipAddress = message.ipAddress;
    }
    if (message.dateTime !== "") {
      obj.dateTime = message.dateTime;
    }
    if (message.secureAccountUrl !== "") {
      obj.secureAccountUrl = message.secureAccountUrl;
    }
    if (message.year !== "") {
      obj.year = message.year;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccessEmailData>, I>>(base?: I): AccessEmailData {
    return AccessEmailData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccessEmailData>, I>>(object: I): AccessEmailData {
    const message = createBaseAccessEmailData();
    message.name = object.name ?? "";
    message.location = object.location ?? "";
    message.ipAddress = object.ipAddress ?? "";
    message.dateTime = object.dateTime ?? "";
    message.secureAccountUrl = object.secureAccountUrl ?? "";
    message.year = object.year ?? "";
    return message;
  },
};

export type EmailService = typeof EmailService;
export const EmailService = {
  sendAcesssEmail: {
    path: "/emailservice.Email/sendAcesssEmail",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AccessEmailRequest): Buffer => Buffer.from(AccessEmailRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): AccessEmailRequest => AccessEmailRequest.decode(value),
    responseSerialize: (value: emailServiceResponse): Buffer =>
      Buffer.from(emailServiceResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): emailServiceResponse => emailServiceResponse.decode(value),
  },
  sendVerificationEmail: {
    path: "/emailservice.Email/sendVerificationEmail",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: VerificationEmailRequest): Buffer =>
      Buffer.from(VerificationEmailRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): VerificationEmailRequest => VerificationEmailRequest.decode(value),
    responseSerialize: (value: emailServiceResponse): Buffer =>
      Buffer.from(emailServiceResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): emailServiceResponse => emailServiceResponse.decode(value),
  },
  sendReports: {
    path: "/emailservice.Email/sendReports",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Reports): Buffer => Buffer.from(Reports.encode(value).finish()),
    requestDeserialize: (value: Buffer): Reports => Reports.decode(value),
    responseSerialize: (value: emailServiceResponse): Buffer =>
      Buffer.from(emailServiceResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): emailServiceResponse => emailServiceResponse.decode(value),
  },
} as const;

export interface EmailServer extends UntypedServiceImplementation {
  sendAcesssEmail: handleUnaryCall<AccessEmailRequest, emailServiceResponse>;
  sendVerificationEmail: handleUnaryCall<VerificationEmailRequest, emailServiceResponse>;
  sendReports: handleUnaryCall<Reports, emailServiceResponse>;
}

export interface EmailClient extends Client {
  sendAcesssEmail(
    request: AccessEmailRequest,
    callback: (error: ServiceError | null, response: emailServiceResponse) => void,
  ): ClientUnaryCall;
  sendAcesssEmail(
    request: AccessEmailRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: emailServiceResponse) => void,
  ): ClientUnaryCall;
  sendAcesssEmail(
    request: AccessEmailRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: emailServiceResponse) => void,
  ): ClientUnaryCall;
  sendVerificationEmail(
    request: VerificationEmailRequest,
    callback: (error: ServiceError | null, response: emailServiceResponse) => void,
  ): ClientUnaryCall;
  sendVerificationEmail(
    request: VerificationEmailRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: emailServiceResponse) => void,
  ): ClientUnaryCall;
  sendVerificationEmail(
    request: VerificationEmailRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: emailServiceResponse) => void,
  ): ClientUnaryCall;
  sendReports(
    request: Reports,
    callback: (error: ServiceError | null, response: emailServiceResponse) => void,
  ): ClientUnaryCall;
  sendReports(
    request: Reports,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: emailServiceResponse) => void,
  ): ClientUnaryCall;
  sendReports(
    request: Reports,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: emailServiceResponse) => void,
  ): ClientUnaryCall;
}

export const EmailClient = makeGenericClientConstructor(EmailService, "emailservice.Email") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): EmailClient;
  service: typeof EmailService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
