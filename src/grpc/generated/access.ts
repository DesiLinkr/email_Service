// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v4.25.3
// source: access.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "access";

/** Request message */
export interface AccessVerifierRequest {
  /** The access token (JWT) */
  token: string;
  /** IP address of the request */
  ip: string;
  /** User agent string */
  userAgent: string;
}

/** Response message */
export interface AccessVerifierResponse {
  /** Whether the token is valid */
  valid: boolean;
  /** User ID extracted from the token */
  userId: string;
  /** Session ID extracted from the token */
  sessionId: string;
  /** Error message if not valid */
  error: string;
  /** HTTP-like status code (200, 401, 403, etc.) */
  status: number;
}

function createBaseAccessVerifierRequest(): AccessVerifierRequest {
  return { token: "", ip: "", userAgent: "" };
}

export const AccessVerifierRequest: MessageFns<AccessVerifierRequest> = {
  encode(message: AccessVerifierRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    if (message.ip !== "") {
      writer.uint32(18).string(message.ip);
    }
    if (message.userAgent !== "") {
      writer.uint32(26).string(message.userAgent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessVerifierRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessVerifierRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ip = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userAgent = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessVerifierRequest {
    return {
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      ip: isSet(object.ip) ? globalThis.String(object.ip) : "",
      userAgent: isSet(object.userAgent) ? globalThis.String(object.userAgent) : "",
    };
  },

  toJSON(message: AccessVerifierRequest): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.ip !== "") {
      obj.ip = message.ip;
    }
    if (message.userAgent !== "") {
      obj.userAgent = message.userAgent;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccessVerifierRequest>, I>>(base?: I): AccessVerifierRequest {
    return AccessVerifierRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccessVerifierRequest>, I>>(object: I): AccessVerifierRequest {
    const message = createBaseAccessVerifierRequest();
    message.token = object.token ?? "";
    message.ip = object.ip ?? "";
    message.userAgent = object.userAgent ?? "";
    return message;
  },
};

function createBaseAccessVerifierResponse(): AccessVerifierResponse {
  return { valid: false, userId: "", sessionId: "", error: "", status: 0 };
}

export const AccessVerifierResponse: MessageFns<AccessVerifierResponse> = {
  encode(message: AccessVerifierResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.valid !== false) {
      writer.uint32(8).bool(message.valid);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.sessionId !== "") {
      writer.uint32(26).string(message.sessionId);
    }
    if (message.error !== "") {
      writer.uint32(34).string(message.error);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessVerifierResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessVerifierResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.valid = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessVerifierResponse {
    return {
      valid: isSet(object.valid) ? globalThis.Boolean(object.valid) : false,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      error: isSet(object.error) ? globalThis.String(object.error) : "",
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
    };
  },

  toJSON(message: AccessVerifierResponse): unknown {
    const obj: any = {};
    if (message.valid !== false) {
      obj.valid = message.valid;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccessVerifierResponse>, I>>(base?: I): AccessVerifierResponse {
    return AccessVerifierResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccessVerifierResponse>, I>>(object: I): AccessVerifierResponse {
    const message = createBaseAccessVerifierResponse();
    message.valid = object.valid ?? false;
    message.userId = object.userId ?? "";
    message.sessionId = object.sessionId ?? "";
    message.error = object.error ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

/** The Access service definition */
export type AccessServiceService = typeof AccessServiceService;
export const AccessServiceService = {
  /** Verify access token across all services */
  verify: {
    path: "/access.AccessService/verify",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AccessVerifierRequest): Buffer =>
      Buffer.from(AccessVerifierRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): AccessVerifierRequest => AccessVerifierRequest.decode(value),
    responseSerialize: (value: AccessVerifierResponse): Buffer =>
      Buffer.from(AccessVerifierResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): AccessVerifierResponse => AccessVerifierResponse.decode(value),
  },
} as const;

export interface AccessServiceServer extends UntypedServiceImplementation {
  /** Verify access token across all services */
  verify: handleUnaryCall<AccessVerifierRequest, AccessVerifierResponse>;
}

export interface AccessServiceClient extends Client {
  /** Verify access token across all services */
  verify(
    request: AccessVerifierRequest,
    callback: (error: ServiceError | null, response: AccessVerifierResponse) => void,
  ): ClientUnaryCall;
  verify(
    request: AccessVerifierRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AccessVerifierResponse) => void,
  ): ClientUnaryCall;
  verify(
    request: AccessVerifierRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AccessVerifierResponse) => void,
  ): ClientUnaryCall;
}

export const AccessServiceClient = makeGenericClientConstructor(
  AccessServiceService,
  "access.AccessService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): AccessServiceClient;
  service: typeof AccessServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
